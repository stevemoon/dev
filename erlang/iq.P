-file("iq.erl", 1).

-module(iq).

-export([go/1,find_moves/2,solve/2,move/4,define_moves/0]).

-compile([debug_info]).

go(Board) ->
    pretty_print(Board),
    find_moves(Board, []).

solve(Board, Moves) ->
    Peg_Count = count_pegs(Board),
    case Peg_Count of
        1 ->
            io:format("Solution found: ~s~n", [Moves]);
        _ ->
            try
                spawn(iq, find_moves, [Board,Moves])
            catch
                error ->
                    ok
            end
    end.

try_moves(Board, MoveList, Moves) ->
    ok.

dyn_match(Pattern, Board) ->
    io:format("~w~n", [Pattern]).

move(Board, From, Takes, To) ->
    MovedBoard =
        move2(Board, [], hd(From) - 64, hd(Takes) - 64, hd(To) - 64, 1).

move2([Cur|OrigBoard], ResultBoard, FromInt, TakesInt, ToInt, Counter)
    when Counter < 16 ->
    case Counter of
        FromInt ->
            move2(OrigBoard,
                  [0] ++ ResultBoard,
                  FromInt,
                  TakesInt,
                  ToInt,
                  Counter + 1);
        TakesInt ->
            move2(OrigBoard,
                  [0] ++ ResultBoard,
                  FromInt,
                  TakesInt,
                  ToInt,
                  Counter + 1);
        ToInt ->
            move2(OrigBoard,
                  [1] ++ ResultBoard,
                  FromInt,
                  TakesInt,
                  ToInt,
                  Counter + 1);
        _ ->
            move2(OrigBoard,
                  [Cur] ++ ResultBoard,
                  FromInt,
                  TakesInt,
                  ToInt,
                  Counter + 1)
    end;
move2(_, ResultBoard, _, _, _, Counter) when Counter == 16 ->
    lists:reverse(ResultBoard).

define_moves() ->
    TextMoves =
        [{$A,$B,$D},
         {$A,$C,$F},
         {$B,$D,$G},
         {$B,$E,$I},
         {$C,$E,$H},
         {$C,$F,$J},
         {$D,$B,$A},
         {$D,$E,$F},
         {$D,$H,$M},
         {$D,$G,$K},
         {$E,$H,$L},
         {$E,$I,$N},
         {$F,$C,$A},
         {$F,$E,$D},
         {$F,$I,$M},
         {$F,$J,$O},
         {$G,$D,$B},
         {$G,$H,$I},
         {$H,$E,$C},
         {$H,$I,$J},
         {$I,$H,$G},
         {$I,$E,$B},
         {$J,$I,$H},
         {$J,$F,$C},
         {$K,$G,$D},
         {$K,$L,$M},
         {$L,$H,$E},
         {$L,$M,$N},
         {$M,$L,$K},
         {$M,$H,$D},
         {$M,$I,$F},
         {$M,$N,$O},
         {$N,$M,$L},
         {$N,$I,$E},
         {$O,$N,$M},
         {$O,$J,$F}],
    numeric_moves(TextMoves, []).

numeric_moves([{X,Y,Z}|Tail], NumericMoves) ->
    numeric_moves(Tail, NumericMoves ++ [{X - 64,Y - 64,Z - 64}]);
numeric_moves([], NumericMoves) ->
    NumericMoves.

move_patterns([Head|Tail], PatternList) ->
    move_patterns(Tail, PatternList ++ [move_pattern(Head)]);
move_patterns([], PatternList) ->
    PatternList.

move_pattern(NumericMove) ->
    move_pattern2([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                  NumericMove,
                  {[],[],[]},
                  1).

move_pattern2(Board,
              {FromInt,TakesInt,ToInt},
              {MovePattern,MovedBoardState,MoveText},
              Counter)
    when Counter < 16 ->
    case Counter of
        FromInt ->
            MovePatternChar = 49,
            MovedBoardStateChar = 48,
            MovedPattern =
                {MovePattern ++ [MovePatternChar],
                 MovedBoardState ++ [MovedBoardStateChar],
                 MoveText},
            move_pattern2(Board,
                          {FromInt,TakesInt,ToInt},
                          MovedPattern,
                          Counter + 1);
        TakesInt ->
            MovePatternChar = 49,
            MovedBoardStateChar = 48,
            MovedPattern =
                {MovePattern ++ [MovePatternChar],
                 MovedBoardState ++ [MovedBoardStateChar],
                 MoveText},
            move_pattern2(Board,
                          {FromInt,TakesInt,ToInt},
                          MovedPattern,
                          Counter + 1);
        ToInt ->
            MovePatternChar = 48,
            MovedBoardStateChar = 49,
            MovedPattern =
                {MovePattern ++ [MovePatternChar],
                 MovedBoardState ++ [MovedBoardStateChar],
                 MoveText},
            move_pattern2(Board,
                          {FromInt,TakesInt,ToInt},
                          MovedPattern,
                          Counter + 1);
        _ ->
            MovePatternChar = 95,
            MovedBoardStateChar = Counter + 64,
            MovedPattern =
                {MovePattern ++ [MovePatternChar],
                 MovedBoardState ++ [MovedBoardStateChar],
                 MoveText},
            move_pattern2(Board,
                          {FromInt,TakesInt,ToInt},
                          MovedPattern,
                          Counter + 1)
    end;
move_pattern2(_,
              {FromInt,TakesInt,ToInt},
              {MovePattern,MovedBoardState,MoveText},
              Counter)
    when Counter == 16 ->
    Pattern =
        {MovePattern,
         MovedBoardState,
         [FromInt + 64]
         ++
         [120]
         ++
         [TakesInt + 64] ++ [45] ++ [62] ++ [ToInt + 64] ++ [32]},
    Pattern.

find_moves([A,B,C,D,E,F,G,H,I,J,K,L,M,N,O], Moves) ->
    Initial_Board = [A,B,C,D,E,F,G,H,I,J,K,L,M,N,O],
    case Initial_Board of
        [1,1,_,0,_,_,_,_,_,_,_,_,_,_,_] ->
            try
                spawn(iq,
                      solve,
                      [[0,0,C,1,E,F,G,H,I,J,K,L,M,N,O],
                       Moves ++ ["AxB->D "]])
            catch
                error ->
                    ok
            end;
        _ ->
            false
    end,
    case Initial_Board of
        [1,_,1,_,_,0,_,_,_,_,_,_,_,_,_] ->
            try
                spawn(iq,
                      solve,
                      [[0,B,0,D,E,1,G,H,I,J,K,L,M,N,O],
                       Moves ++ ["AxC->F "]])
            catch
                error ->
                    ok
            end;
        _ ->
            false
    end,
    case Initial_Board of
        [_,1,_,1,_,_,0,_,_,_,_,_,_,_,_] ->
            try
                spawn(iq,
                      solve,
                      [[A,0,C,0,E,F,1,H,I,J,K,L,M,N,O],
                       Moves ++ ["BxD->G "]])
            catch
                error ->
                    ok
            end;
        _ ->
            false
    end,
    case Initial_Board of
        [_,1,_,_,1,_,_,_,0,_,_,_,_,_,_] ->
            try
                spawn(iq,
                      solve,
                      [[A,0,C,D,0,F,G,H,1,J,K,L,M,N,O],
                       Moves ++ ["BxE->I "]])
            catch
                error ->
                    ok
            end;
        _ ->
            false
    end,
    case Initial_Board of
        [_,_,1,_,1,_,_,0,_,_,_,_,_,_,_] ->
            try
                spawn(iq,
                      solve,
                      [[A,B,0,D,0,F,G,1,I,J,K,L,M,N,O],
                       Moves ++ ["CxE->H "]])
            catch
                error ->
                    ok
            end;
        _ ->
            false
    end,
    case Initial_Board of
        [_,_,1,_,_,1,_,_,_,0,_,_,_,_,_] ->
            try
                spawn(iq,
                      solve,
                      [[A,B,0,D,E,0,G,H,I,1,K,L,M,N,O],
                       Moves ++ ["CxF->J "]])
            catch
                error ->
                    ok
            end;
        _ ->
            false
    end,
    case Initial_Board of
        [0,1,_,1,_,_,_,_,_,_,_,_,_,_,_] ->
            try
                spawn(iq,
                      solve,
                      [[1,0,C,0,E,F,G,H,I,J,K,L,M,N,O],
                       Moves ++ ["DxB->A "]])
            catch
                error ->
                    ok
            end;
        _ ->
            false
    end,
    case Initial_Board of
        [_,_,_,1,1,0,_,_,_,_,_,_,_,_,_] ->
            try
                spawn(iq,
                      solve,
                      [[A,B,C,0,0,1,G,H,I,J,K,L,M,N,O],
                       Moves ++ ["DxE->F "]])
            catch
                error ->
                    ok
            end;
        _ ->
            false
    end,
    case Initial_Board of
        [_,_,_,1,_,_,_,1,_,_,_,_,0,_,_] ->
            try
                spawn(iq,
                      solve,
                      [[A,B,C,0,E,F,G,0,I,J,K,L,1,N,O],
                       Moves ++ ["DxH->M "]])
            catch
                error ->
                    ok
            end;
        _ ->
            false
    end,
    case Initial_Board of
        [_,_,_,1,_,_,1,_,_,_,0,_,_,_,_] ->
            try
                spawn(iq,
                      solve,
                      [[A,B,C,0,E,F,0,H,I,J,1,L,M,N,O],
                       Moves ++ ["DxG->K "]])
            catch
                error ->
                    ok
            end;
        _ ->
            false
    end,
    case Initial_Board of
        [_,_,_,_,1,_,_,1,_,_,_,0,_,_,_] ->
            try
                spawn(iq,
                      solve,
                      [[A,B,C,D,0,F,G,0,I,J,K,1,M,N,O],
                       Moves ++ ["ExH->L "]])
            catch
                error ->
                    ok
            end;
        _ ->
            false
    end,
    case Initial_Board of
        [_,_,_,_,1,_,_,_,1,_,_,_,_,0,_] ->
            try
                spawn(iq,
                      solve,
                      [[A,B,C,D,0,F,G,H,0,J,K,L,M,1,O],
                       Moves ++ ["ExI->N "]])
            catch
                error ->
                    ok
            end;
        _ ->
            false
    end,
    case Initial_Board of
        [0,_,1,_,_,1,_,_,_,_,_,_,_,_,_] ->
            try
                spawn(iq,
                      solve,
                      [[1,B,0,D,E,0,G,H,I,J,K,L,M,N,O],
                       Moves ++ ["FxC->A "]])
            catch
                error ->
                    ok
            end;
        _ ->
            false
    end,
    case Initial_Board of
        [_,_,_,0,1,1,_,_,_,_,_,_,_,_,_] ->
            try
                spawn(iq,
                      solve,
                      [[A,B,C,1,0,0,G,H,I,J,K,L,M,N,O],
                       Moves ++ ["FxE->D "]])
            catch
                error ->
                    ok
            end;
        _ ->
            false
    end,
    case Initial_Board of
        [_,_,_,_,_,1,_,_,1,_,_,_,0,_,_] ->
            try
                spawn(iq,
                      solve,
                      [[A,B,C,D,E,0,G,H,0,J,K,L,1,N,O],
                       Moves ++ ["FxI->M "]])
            catch
                error ->
                    ok
            end;
        _ ->
            false
    end,
    case Initial_Board of
        [_,_,_,_,_,1,_,_,_,1,_,_,_,_,0] ->
            try
                spawn(iq,
                      solve,
                      [[A,B,C,D,E,0,G,H,I,0,K,L,M,N,1],
                       Moves ++ ["FxJ->N "]])
            catch
                error ->
                    ok
            end;
        _ ->
            false
    end,
    case Initial_Board of
        [_,0,_,1,_,_,1,_,_,_,_,_,_,_,_] ->
            try
                spawn(iq,
                      solve,
                      [[A,1,C,0,E,F,0,H,I,J,K,L,M,N,O],
                       Moves ++ ["GxD->B "]])
            catch
                error ->
                    ok
            end;
        _ ->
            false
    end,
    case Initial_Board of
        [_,_,_,_,_,_,1,1,0,_,_,_,_,_,_] ->
            try
                spawn(iq,
                      solve,
                      [[A,B,C,D,E,F,0,0,1,J,K,L,M,N,O],
                       Moves ++ ["GxH->I "]])
            catch
                error ->
                    ok
            end;
        _ ->
            false
    end,
    case Initial_Board of
        [_,_,0,_,1,_,_,1,_,_,_,_,_,_,_] ->
            try
                spawn(iq,
                      solve,
                      [[A,B,1,D,0,F,G,0,I,J,K,L,M,N,O],
                       Moves ++ ["HxE->C "]])
            catch
                error ->
                    ok
            end;
        _ ->
            false
    end,
    case Initial_Board of
        [_,_,_,_,_,_,_,1,1,0,_,_,_,_,_] ->
            try
                spawn(iq,
                      solve,
                      [[A,B,C,D,E,F,G,0,0,1,K,L,M,N,O],
                       Moves ++ ["HxI->J "]])
            catch
                error ->
                    ok
            end;
        _ ->
            false
    end,
    case Initial_Board of
        [_,_,_,_,_,_,0,1,1,_,_,_,_,_,_] ->
            try
                spawn(iq,
                      solve,
                      [[A,B,C,D,E,F,1,0,0,J,K,L,M,N,O],
                       Moves ++ ["IxH->G "]])
            catch
                error ->
                    ok
            end;
        _ ->
            false
    end,
    case Initial_Board of
        [_,0,_,_,1,_,_,_,1,_,_,_,_,_,_] ->
            try
                spawn(iq,
                      solve,
                      [[A,1,C,D,0,F,G,H,0,J,K,L,M,N,O],
                       Moves ++ ["IxE->B "]])
            catch
                error ->
                    ok
            end;
        _ ->
            false
    end,
    case Initial_Board of
        [_,_,_,_,_,_,_,0,1,1,_,_,_,_,_] ->
            try
                spawn(iq,
                      solve,
                      [[A,B,C,D,E,F,G,1,0,0,K,L,M,N,O],
                       Moves ++ ["JxI->H "]])
            catch
                error ->
                    ok
            end;
        _ ->
            false
    end,
    case Initial_Board of
        [_,_,0,_,_,1,_,_,_,1,_,_,_,_,_] ->
            try
                spawn(iq,
                      solve,
                      [[A,B,1,D,E,0,G,H,I,0,K,L,M,N,O],
                       Moves ++ ["JxF->C "]])
            catch
                error ->
                    ok
            end;
        _ ->
            false
    end,
    case Initial_Board of
        [_,_,_,0,_,_,1,_,_,_,1,_,_,_,_] ->
            try
                spawn(iq,
                      solve,
                      [[A,B,C,1,E,F,0,H,I,J,0,L,M,N,O],
                       Moves ++ ["KxG->D "]])
            catch
                error ->
                    ok
            end;
        _ ->
            false
    end,
    case Initial_Board of
        [_,_,_,_,_,_,_,_,_,_,1,1,0,_,_] ->
            try
                spawn(iq,
                      solve,
                      [[A,B,C,D,E,F,G,H,I,J,0,0,1,N,O],
                       Moves ++ ["KxL->M "]])
            catch
                error ->
                    ok
            end;
        _ ->
            false
    end,
    case Initial_Board of
        [_,_,_,_,0,_,_,1,_,_,_,1,_,_,_] ->
            try
                spawn(iq,
                      solve,
                      [[A,B,C,D,1,F,G,0,I,J,K,0,M,N,O],
                       Moves ++ ["LxH->E "]])
            catch
                error ->
                    ok
            end;
        _ ->
            false
    end,
    case Initial_Board of
        [_,_,_,_,_,_,_,_,_,_,_,1,1,0,_] ->
            try
                spawn(iq,
                      solve,
                      [[A,B,C,D,E,F,G,H,I,J,K,0,0,1,O],
                       Moves ++ ["LxM->N "]])
            catch
                error ->
                    ok
            end;
        _ ->
            false
    end,
    case Initial_Board of
        [_,_,_,_,_,_,_,_,_,_,0,1,1,_,_] ->
            try
                spawn(iq,
                      solve,
                      [[A,B,C,D,E,F,G,H,I,J,1,0,0,N,O],
                       Moves ++ ["MxL->K "]])
            catch
                error ->
                    ok
            end;
        _ ->
            false
    end,
    case Initial_Board of
        [_,_,_,0,_,_,_,1,_,_,_,_,1,_,_] ->
            try
                spawn(iq,
                      solve,
                      [[A,B,C,1,E,F,G,0,I,J,K,L,0,N,O],
                       Moves ++ ["MxH->D "]])
            catch
                error ->
                    ok
            end;
        _ ->
            false
    end,
    case Initial_Board of
        [_,_,_,_,_,0,_,_,1,_,_,_,1,_,_] ->
            try
                spawn(iq,
                      solve,
                      [[A,B,C,D,E,1,G,H,0,J,K,L,0,N,O],
                       Moves ++ ["MxI->F "]])
            catch
                error ->
                    ok
            end;
        _ ->
            false
    end,
    case Initial_Board of
        [_,_,_,_,_,_,_,_,_,_,_,_,1,1,0] ->
            try
                spawn(iq,
                      solve,
                      [[A,B,C,D,E,F,G,H,I,J,K,L,0,0,1],
                       Moves ++ ["MxN->N "]])
            catch
                error ->
                    ok
            end;
        _ ->
            false
    end,
    case Initial_Board of
        [_,_,_,_,_,_,_,_,_,_,_,0,1,1,_] ->
            try
                spawn(iq,
                      solve,
                      [[A,B,C,D,E,F,G,H,I,J,K,1,0,0,O],
                       Moves ++ ["NxM->L "]])
            catch
                error ->
                    ok
            end;
        _ ->
            false
    end,
    case Initial_Board of
        [_,_,_,_,0,_,_,_,1,_,_,_,_,1,_] ->
            try
                spawn(iq,
                      solve,
                      [[A,B,C,D,1,F,G,H,0,J,K,L,M,0,O],
                       Moves ++ ["NxI->E "]])
            catch
                error ->
                    ok
            end;
        _ ->
            false
    end,
    case Initial_Board of
        [_,_,_,_,_,_,_,_,_,_,_,_,0,1,1] ->
            try
                spawn(iq,
                      solve,
                      [[A,B,C,D,E,F,G,H,I,J,K,L,1,0,0],
                       Moves ++ ["NxN->M "]])
            catch
                error ->
                    ok
            end;
        _ ->
            false
    end,
    case Initial_Board of
        [_,_,_,_,_,0,_,_,_,1,_,_,_,_,1] ->
            try
                spawn(iq,
                      solve,
                      [[A,B,C,D,E,1,G,H,I,0,K,L,M,N,0],
                       Moves ++ ["NxJ->F "]])
            catch
                error ->
                    ok
            end;
        _ ->
            false
    end.

pretty_print([A,B,C,D,E,F,G,H,I,J,K,L,M,N,O]) ->
    io:format("    ~B~n", [A]),
    io:format("   ~B ~B~n", [B,C]),
    io:format("  ~B ~B ~B~n", [D,E,F]),
    io:format(" ~B ~B ~B ~B~n", [G,H,I,J]),
    io:format("~B ~B ~B ~B ~B~n", [K,L,M,N,O]),
    io:format("Total Pegs: ~B~n~n",
              [count_pegs([A,B,C,D,E,F,G,H,I,J,K,L,M,N,O])]).

rotate_left([A,B,C,D,E,F,G,H,I,J,K,L,M,N,O]) ->
    [O,J,N,F,I,M,C,E,H,L,A,B,D,G,K].

rotate_right(Board) ->
    rotate_left(rotate_left(Board)).

count_pegs(Board) ->
    lists:foldl(fun(X, Sum) ->
                       X + Sum
                end,
                0,
                Board).



